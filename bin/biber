#!/usr/bin/perl
use strict;
use warnings;

# no warnings 'utf8';
use Carp;
use IPC::Cmd qw( can_run run );
use Log::Log4perl qw(:no_extra_logdie_message);
use POSIX qw(strftime);
use Biber;
use Biber::Output::BBL;
use Biber::Utils;
use File::Spec;

#Don't remove the next line!
#<wrapper_snippet>---------------------------------

use Getopt::Long qw/:config no_ignore_case/;
my $opts = {};
GetOptions(
           $opts,
           'fastsort|f!',
           'locale|l=s',
           'cssort',
           'collate|C!',
           'collate_options|c=s',
           'mincrossrefs|m=s',
           'u',                   # alias for bibencoding=UTF-8
           'U',                   # alias for inputenc=UTF-8
           'bibencoding|e=s',
           'inputenc|E=s',
           'nolatexdecode|n',
           'bibdata|d=s',
           'bibdatatype=s',       # not exposed in usage output currently
           'outfile|O=s',
           'output-directory=s',
           'configfile|g=s',
           'noconf',
           'allentries|a!',
           'validate|V!',
           'debug|D!',
           'trace|T!',
           'quiet|q',
           'nolog!',
           'onlylog!',
           'wraplines|w!',
           'help|h|?',
           'version|v'
          );

#--------------------------------------------------

our $VERSION = $Biber::VERSION;
our $BETA_VERSION = $Biber::BETA_VERSION;

die usage() if exists $opts->{'help'};

die version() if exists $opts->{'version'};

die usage() unless @ARGV or $opts->{'allentries'};

#--------------------------------------------------

# we can give a list of datafiles as argument, so
# this option is passed as an anon array
if ($opts->{bibdata}) {
  $opts->{bibdata} = [ split /\s*,\s*/, $opts->{bibdata} ]
}

# Sanitise collate option if fasssort if specified
if ($opts->{fastsort}) {
  delete $opts->{collate};
}

# Resolve shortcut aliases for UTF-8ness
if ($opts->{u}) {
  $opts->{bibencoding} = 'UTF-8';
  delete $opts->{u};
}
if ($opts->{U}) {
  $opts->{inputenc} = 'UTF-8';
  delete $opts->{U};
}

my $outdir;
my $biberlog = 'biber.log';

if ( defined $opts->{'output-directory'} ) {
  $outdir = $opts->{'output-directory'};
  $biberlog = File::Spec->catfile($outdir, $biberlog);
}

my $biber = Biber->new(%$opts);

# Setting the logging level of Log::Log4perl
my $LOGLEVEL;
if (Biber::Config->getoption('trace')) {
  $LOGLEVEL = 'TRACE'
} elsif (Biber::Config->getoption('debug')) {
  $LOGLEVEL = 'DEBUG'
} elsif (Biber::Config->getoption('quiet')) {
  $LOGLEVEL = 'ERROR'
} else {
  $LOGLEVEL = 'INFO'
}

my $LOGLEVEL_F;
if (Biber::Config->getoption('nolog')) {
  $LOGLEVEL_F = 'OFF'
} else {
  $LOGLEVEL_F = $LOGLEVEL
}

my $LOGLEVEL_S;
if (Biber::Config->getoption('onlylog')) {
  $LOGLEVEL_S = 'OFF'
} else {
  $LOGLEVEL_S = $LOGLEVEL
}

## TODO make Screen.Threshold optional: in some situations we'd like
#  to have debug msgs on the screen too!

# configuration "file" for Log::Log4perl
my $l4pconf = qq(
    log4perl.category.main                             = $LOGLEVEL, Logfile, Screen
    log4perl.category.screen                           = $LOGLEVEL_S, Screen
    log4perl.category.logfile                          = $LOGLEVEL_F, Logfile

    log4perl.appender.Logfile                          = Log::Log4perl::Appender::File
    log4perl.appender.Logfile.utf8                     = 1
    log4perl.appender.Logfile.filename                 = $biberlog
    log4perl.appender.Logfile.mode                     = write
    log4perl.appender.Logfile.layout                   = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.Logfile.layout.ConversionPattern = [%r] %F{1}:%L> %p - %m%n

    log4perl.appender.Screen                           = Log::Log4perl::Appender::Screen
    ## the following option sets a max level of INFO for the console:
    ## i.e. debug messages can only go to the log file
    log4perl.appender.Screen.utf8                      = 1
    log4perl.appender.Screen.Threshold                 = INFO
    log4perl.appender.Screen.stderr                    = 0
    log4perl.appender.Screen.layout                    = Log::Log4perl::Layout::SimpleLayout
);

Log::Log4perl::init(\$l4pconf) ;

# get the logger object
my $logger  = Log::Log4perl::get_logger('main') ;
my $screen  = Log::Log4perl::get_logger('screen');
my $logfile = Log::Log4perl::get_logger('logfile');

my $ctrlfile;
my $bblfile;

my $time_string = strftime "%a %b %e, %Y, %H:%M:%S", localtime;
$logfile->info("=== Biber version $VERSION");
$logfile->info("=== $time_string");

if (Biber::Config->getoption('debug')) {
  $screen->info("DEBUG mode: all messages are logged to '$biberlog'")
}

if ( $opts->{allentries} and $opts->{bibdata} ) {
  # Special case as we have no .bcf to parse.
  # Use .bcf defaults from Constants.pm plus any cmd line args and constructs our
  # sections object here
  $bblfile = $opts->{bibdata}[0];
  $bblfile =~ s/(?:\.(bib|xml|dbxml))?$/\.bbl/;

  my $bib_sections = new Biber::Sections;
  my $bib_section = new Biber::Section('number' => 0); # Only one section in "allentries"
  $bib_section->set_datafiles($opts->{bibdata});
  $logger->info("Using all citekeys in files " . join(',', @{$opts->{bibdata}}));
  $bib_sections->add_section($bib_section);
  $biber->{sections} = $bib_sections;

  # We want the strict perl utf8 "UTF-8"
  normalise_utf8();
}
else {
  $ctrlfile = $ARGV[0] or croak usage();
  $ctrlfile .= '.bcf' unless $ctrlfile =~ m/\.bcf$/;

  if (Biber::Config->getoption('outfile')) {
    $bblfile = Biber::Config->getoption('outfile')
  } else {
    $bblfile = $ctrlfile;
    $bblfile =~ s/bcf$/bbl/;
  }

  if (defined($opts->{'output-directory'})) {
    my (undef, undef, $file) = File::Spec->splitpath($bblfile);
    $bblfile = File::Spec->catfile($outdir, $file)
  }

  # parse the .bcf control file
  $biber->parse_ctrlfile($ctrlfile);
}

if (Biber::Config->getoption('trace')) {
  $logger->trace("\n###########################################################\n",
    "############# Dump of initial config object: ##############\n",
    Data::Dump::pp($Biber::Config::CONFIG), "\n",
    "############# Dump of initial biber object: ###############\n",
    $biber->_stringdump,
    "\n###########################################################")
}

# Set the output class. Should be a subclass of Biber::Output::Base
$biber->set_output_obj(Biber::Output::BBL->new());

if (Biber::Config->getoption('trace')) {
  $logger->trace("\n###########################################################\n",
    "############# Dump of post-parse config object: ###########\n",
    Data::Dump::pp($Biber::Config::CONFIG), "\n",
    "############# Dump of post-parse biber object: ############\n",
    $biber->_stringdump,
    "\n###########################################################")
}

# Do all the real work
$biber->prepare;

if (Biber::Config->getoption('trace')) {
  $logger->trace("\n###########################################################\n",
    "############# Dump of final config object: ################\n",
    Data::Dump::pp($Biber::Config::CONFIG), "\n",
    "############# Dump of final biber object: #################\n",
    $biber->_stringdump,
    "\n###########################################################")
}

# Get reference to output object
my $bbloutput = $biber->get_output_obj;
# Set the output target
$bbloutput->set_output_target_file($bblfile);
# Write the output to the target
$bbloutput->output;

###

# display warnings/errors summary, like BibTeX's format
# unless in quiet mode
unless (Biber::Config->getoption('quiet')) {
  if (defined($biber->{errors})) { # if errors, ignore warnings
    if ($biber->{errors} == 1) {
      print "(There was 1 error message)\n";
    } elsif ($biber->{errors} > 1) {
      print "(There were ", $biber->{errors}, " error messages)\n";
    }
  } elsif (defined($biber->{warnings})) {
    if ($biber->{warnings} == 1) {
      print "(There was 1 warning)\n";
    } elsif ($biber->{warnings} > 1) {
      print "(There were ", $biber->{warnings}, " warnings)\n";
    }
  }
}

#======================================================

sub version {
  my $v = "biber version: $VERSION";
  $v .= ' (beta)' if $BETA_VERSION;
  return "$v\n";
}

sub usage {
  qq{
Usage:  biber file.bcf
        Creates file.bbl using control file file.bcf (.bcf extension is optional)

        biber -d foo.bib file.bcf
        Creates file.bbl from entries in foo.bib and the datafiles
        listed in file.bcf

        biber -d foo.bib,bar.bib -a
        Creates foo.bbl from all entries in foo.bib and bar.bib. No .bcf used

Options:
  --help|-h
      Show this help message.

  --version|-v
      Display version number.

  --mincrossrefs|-m <n>
      Set threshold for crossrefs.

  --fastsort|-f
      Use Perlâ€™s sort instead of Unicode::Collate for sorting. Also uses
      OS locale definitions (which may be broken for some languages ...)

  --locale|-l [locale]
      Set the locale to be used for sorting. With built-in sorting
      (i.e. --collate is not set), this sets the OS locale for sorting. With
      Unicode::Collate (--collate flag), the locale is used to add CLDR
      tailoring to the sort (if available for the locale)

  --cssort
      Use case-sensitive sorting. Case insensitive is the default.

  --collate|-C
      Sort with Unicode::Collate instead of the built-in sort function.
      This is the default.

  --collate_options|-c [options]
      Options to pass to the Unicode::Collate object used for sorting
      (default is 'level => "2", table => "latinkeys.txt"').
      See "perldoc Unicode::Collate" for details.

  --bibdata|-d <files>
      Use <files> as bibliography databases (comma separated list).

  --outfile|-O <file>
      Output to <file> instead of <basename>.bbl
      <file> is relative to --output-directory, if set (absolute
      paths in this case are stripped to filename only). <file> can
      be absolute if --output-directory is not set.

  --output-directory <d>
      Files (.bbl and .log) are output to directory <d> instead
      of the current directory.

  --configfile|-g <file>
      Use <file> as configuration file for Biber.
      The default is the first file found among
      "biber.conf" in the current directory, "\$HOME/.biber.conf",
      or else the output of "kpsewhich biber.conf".

  --noconf
      Don't look for a configfile

  --allentries|-a
      Output all entries in the database. (NB: this ignores the .bcf file.)

  --bibencoding|-e [encoding]
      Specify the encoding of the bib file(s). Default is "UTF-8"
      Normally it's not necessary to set this as it's passed via the
      .bcf file from biblatex's setting of the same name.
      See "perldoc Encode::Supported" for a list of supported encodings.

  --inputenc|-E [encoding]
      Specify the encoding of the output .bbl file. Default is "UTF-8".
      Normally it's not necessary to set this as it's passed via biblatex
      from the inputenc package setting.
      See "perldoc Encode::Supported" for a list of supported encodings.

  -u
      Alias for --bibencoding=UTF-8.

  -U
      Alias for --inputenc=UTF-8.

  --nolatexdecode|-n
      Do not decode LaTeX character macros into utf8. Normally, when
      the .bib is not utf8 but inputenc is set to utf8, this automatically
      happens. However, LaTeX's inputenc package's [utf8] encoding is not
      at all a complete utf8 encoding and so decoding LaTeX character
      macros can lead to utf8 characters which inputenc cannot recognise.
      Use this option to prevent utf8 conversion of characters which
      inputenc would not recognise.

  --validate|-V
      Schema validate both the <basename>.bcf biblatex control file
      and the BibLateXML files (if used). Dies on validation error.

  --debug|-D
      Turn on debugging for biber.

  --quiet|-q
      Turn infos and warnings off.

  --nolog
      Do not write any logfile.

  --onlylog
      Do not write any message to screen.

  --wraplines|-w
      Wrap lines in the .bbl file.

Bug reports, forum and downloads at:
  https://sourceforge.net/projects/biblatex-biber
\n}
}

__END__

=pod

=encoding utf8

=head1 NAME

C<biber> - A bibtex replacement for users of biblatex

=head1 SYNOPSIS

biber [ { --bibdata | -d } database.{bib|xml|dbxml} ]
      [ --mincrossrefs | -m ] [ [--collate|-C] | [ --fastsort | -f ] ]
      [ -u ] [ -U ] [ --bibencoding | -e ] [ --inputenc | -E ] [ --nolatexdecode ]
      [ --debug | -D ] [ { --outfile | -O } filename ] file.bcf

biber --bibdata database --allentries [ --outfile filename ] [ ... ]

biber { --help | --version }

=head1 DESCRIPTION

C<biber> provides a replacement of the bibtex processor for users of biblatex.
Besides emulating the functionality of bibtex + biblatex.bst, it also supports ...

(REST TO BE WRITTEN)

=head1 AUTHOR

FranÃ§ois Charette, C<< <firmicus at gmx.net> >>

=head1 BUGS

Please report any bugs or feature requests on our sourceforge tracker at
L<https://sourceforge.net/tracker2/?func=browse&group_id=228270>.

=head1 COPYRIGHT & LICENSE

Copyright 2009-2010 FranÃ§ois Charette and Philip Kime, all rights reserved.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# vim: set tabstop=2 shiftwidth=2 expandtab:
