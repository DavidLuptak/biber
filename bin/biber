#!/usr/bin/perl
use strict ;
use warnings ;
# no warnings 'utf8' ;
use Carp ;
use IPC::Cmd qw( can_run run ) ;

use Biber ;
use Biber::Utils ;

#Don't remove the next line!
#<wrapper_snippet>---------------------------------

use Getopt::Long qw/:config no_ignore_case/ ;
my $opts = {} ;
GetOptions(
    $opts,
    'v2',
    'fastsort|f!',
    'collate_options|c=s',
    'mincrossrefs|m=s',
    'unicodebbl|U!',
    'unicodebib|u!',
    'inputenc|i=s',  ## TODO
    'bibencoding|e=s',
    'useprd|p!',
    'bibdata|d=s',
    'outfile|O=s',
    'allentries|a!',
    'validate|V!',
    'debug|D!',
    'quiet|q',
    'help|h|?',
    'version|v'
) ;

#--------------------------------------------------

use open IO => ':utf8' ;

our $VERSION = $Biber::VERSION ; 

die usage() if exists $opts->{'help'} ;

die version() if exists $opts->{'version'} ;

#--------------------------------------------------

# we can give a list of datafiles as argument, so
# this option is passed as an anon array
if ($opts->{bibdata}) {
    $opts->{bibdata} = [ split /\s*,\s*/, $opts->{bibdata} ] 
} ;

my $biber = Biber->new($opts) ;

#=====================================================
# Parse aux file
#=====================================================

my $auxfile ;
my $bblfile ; 

if ( $opts->{allentries} && $opts->{bibdata} ) {
    $bblfile = $opts->{bibdata}->[0] ;
    $bblfile =~ s/(?:\.(bib|xml|dbxml))?$/\.bbl/ ;
}
else {
    $auxfile = $ARGV[0] or croak usage() ;
    $auxfile .= '.aux' unless $auxfile =~ m/\.aux$/ ;
    $bblfile = $auxfile ;
    $bblfile =~ s/aux$/bbl/ ;
    #V2
    if ($opts->{v2}) {
      print "** USING EXPERIMENTAL V2 OPTIONS CODE!! **\n";
      $biber->parse_auxfile_v2($auxfile);
    }
    else {
      $biber->parse_auxfile($auxfile);
    }
}

if ($biber->config('debug')) {
    $biber->_dump('biber.dump0') ;
    print ">> Dumped initial biber object for debugging in file biber.dump0\n"
}

#=====================================================
# Parse/query database
#=====================================================

foreach my $bib (@{ $biber->config('bibdata') }) {

    # this uses "kpsepath bib" and File::Find to find $bib in $BIBINPUTS paths:
    $bib = bibfind($bib) ;

    if ($bib =~ /\.(db)?xml$/) {
        croak "File $bib does not exist!" unless -f $bib ;
        $biber->parse_biblatexml( $bib )
    }
    elsif ($bib =~ /\.bib$/) {
        croak "File $bib does not exist!" unless -f $bib ;
        $biber->parse_bibtex($bib)
    }
    else {
        croak "File $bib.bib does not exist!" unless -f "$bib.bib" ;
        $biber->parse_bibtex("$bib.bib") ;
    }
}

if ($biber->config('debug')) {
    $biber->_dump('biber.dump1') ;
    print ">> Dumped postparse biber object for debugging in file biber.dump1\n"
}

$biber->prepare ; 

if ($biber->config('debug')) {
    $biber->_dump('biber.dump2') ;
    print ">> Dumped final biber object for debugging in file biber.dump2\n"
}

if ($biber->config('outfile')) {
    $bblfile = $biber->config('outfile')
} ;

$biber->output_to_bbl($bblfile) ;

# display warnings/errors summary, like BibTeX
if (defined($biber->{errors})) { # if errors, ignore warnings
	if ($biber->{errors} == 1) {
		print "(There was 1 error message)\n";
	}
	elsif ($biber->{errors} > 1) {
		print "(There were ", $biber->{errors}, " error messages)\n";
	}
}
elsif (defined($biber->{warnings})) {
	if ($biber->{warnings} == 1) {
		print "(There was 1 warning)\n";
	}
	elsif ($biber->{warnings} > 1) {
		print "(There were ", $biber->{warnings}, " warnings)\n";
	}
}

#======================================================

sub version {
    my $me = "biber" ;    #basename($0);

    qq[
$me Version: $VERSION
      \n]
}

sub usage {
    my $me = "biber" ;    #basename($0);

    qq[
Usage:  $me file.aux
        Creates file.bbl

        $me -d foo.bib file.aux
        Creates file.bbl from entries in foo.bib and the datafiles 
        listed in file.aux

        $me -d foo.bib,bar.xml -a
        Creates foo.bbl from all entries in foo.bib and bar.xml

Options:
  --help|-h              Show this help message.
  --v2                   Enable experimental Biblatex/Biber version 2 options processing.
                         Don't use this unless you truly understand what it means.
  --version|-v           Display version number.
  --mincrossrefs|-m <n>  Set threshold for crossrefs.
  --fastsort|-f          Use Perl’s sort instead of Unicode::Collate for sorting.
  --locale|-l [locale]   Set the locale to be used for sorting with option --fastsort
  --collate_options|-c [options] 
                         Options to pass to the Unicode::Collate object used for sorting
                         (default is 'level => 2, table => latinkeys.txt'). 
                         See "perldoc Unicode::Collate" for details.
  --useprd|-p            Parse with Parse::RecDescent instead of Text::BibTeX.
  --bibdata|-d <files>   Use <files> as bibliography databases (comma separated list).
  --outfile|-O <file>    Output to <file> instead of <basename>.bbl
  --allentries|-a        Output all entries in the database.
                         (NB: this ignores the .aux file.)
  --unicodebib|-u        Assume bib file is UTF-8 and skip latex_decode.
  --unicodebbl|-U        Encode the bbl output in UTF-8.
  --bibencoding|-e [encoding] 
                         Specify the encoding of the bib file(s). The bbl file 
                         will also have this encoding when --unicodebbl is false.
                         See "perldoc Encode::Supported" for a list of supported encodings.
  --validate|-V          Schema Validate both the <basename>.bcf biblatex control file
                         and biblatexml bib files (if used). Dies on validation error.
  --debug|-D             Turn on debugging for biber.
  --quiet|-q             Turn warnings off.
    \n]
}

__END__

=pod

=head1 NAME

C<biber> - A bibtex replacement for users of biblatex

=head1 SYNOPSIS

biber [ { --bibdata | -d } database.{bib|xml|dbxml} ] [ --useprd | -p ] 
      [ --mincrossrefs | -m ] [ --fastsort | -f ] [ --unicodebib | -u ] 
      [ --unicodebbl | -U ] [ --debug | -D ] [ { --outfile | -O } filename ] 
      file.aux

biber --bibdata database --allentries [ --outfile filename ] [ ... ]

biber { --help | --version }

=head1 DESCRIPTION

C<biber> provides a replacement of the bibtex processor for users of biblatex.
Besides emulating the functionality of bibtex + biblatex.bst, it also supports ...

(REST TO BE WRITTEN)

=head1 AUTHOR

François Charette, C<< <firmicus at gmx.net> >>

=head1 BUGS

Please report any bugs or feature requests on our sourceforge tracker at
L<https://sourceforge.net/tracker2/?func=browse&group_id=228270>. 

=head1 COPYRIGHT & LICENSE

Copyright 2009 François Charette, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

# vim: set tabstop=4 shiftwidth=4:
