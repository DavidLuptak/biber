#!/usr/bin/perl
#===============================================================================
#
#         FILE:  biber
#
#        USAGE:  biber [options] auxfile
#                Type biber -h or --help for details
#
#  DESCRIPTION:  A BibTeX replacement for users of biblatex
#       AUTHOR:  François Charette <firmicus ατ gmx δοτ net>
#      VERSION:  0.4
#          URL:  http://biblatex-biber.sourceforge.net
#
# REQUIREMENTS: biber requires the following CPAN modules:
#                1. either
#                   - Text::BibTeX
#                   or
#                   - Parse::RecDescent 
#                   - Regexp::Common
#                2. - File::Slurp (only if converting bib files to UTF-8)
#                2. For parsing the biblatexml format: 
#                   - XML::LibXML 
#                3. and optionally (for querying a DBXML database):
#                   - Sleepycat::DbXml
#
# ROADMAP / TODO : (in decreasing order of priority)
#               * Prepare Makefile.PL etc for distribution
#               * Write comprehensive test suite
#               * refactor postprocess method
#               * fix handling of labelalpha
#               * check and complete the generation of special fields: see manual §4.2.4
#               * improve documentation of source code!
#               ----- version 0.5 ----- FIRST OFFICIAL RELEASE?
#               * separate data parsing in individual modules
#               * read config file (e.g. $HOME/.biber.conf) to change default settings
#               * allow to ignore certain fields through conf settings
#               * user-setting of diacritics to ignore in sorting (‘ and ʿ are currently built-in)
#               * add validation mechanism for options and config (untaint data!)
#               ----- version 0.6 -----
#               * use Log::Log4Perl 
#               * add option --inputencoding <latin1> etc (only utf8 supported as of now)
#               * validate bibtex data with Text::Bibtex::Structure (optional)
#               * validate XML data against RelaxNG schema (optional)
#               ----- version 0.7 -----
#               * plugin facility
#               * implement "debug output" when sorting=99
#               ----- version 0.8 -----
#               * refactor OO structure: add Biber::Conf and Biber::Entry classes
#               * make biber and dependencies available as a par archive for maximal portability ?
#               ----- version 0.9 -----
#               * add keys for selecting script, language, translation, transliteration
#               * prototype of bbx style for handling multiscript bibliographies (requires xelatex)
#               * fix crossref handling of reviews
#               * <nonSort>The</nonSort> Title => automatically generates sorttitle = Title, The
#               * "D[onald] E. Knuth" prints as D. E. Knuth but is sorted with Donald E. Knuth
#               * ... 
#               ----- version 1.0 -----
#
#===============================================================================

use strict;
use warnings;
no warnings 'utf8';

#This will be removed in the official distribution:
use FindBin;
use lib "$FindBin::Bin/../lib";

use Carp;
use Biber;

#---------------------------------------------------

use Getopt::Long qw/:config no_ignore_case/;
my $opts = {};
GetOptions(
    $opts,
    'fastsort|f!',
    'mincrossrefs|m=s',
    'unicodebbl|U!',
    'unicodebib|u!',
    'useprd|p!',
    'bibdata|d=s',
    'outfile|O=s',
    'allentries|a!',
    # 'convert|c=s',
    # 'type|t=s',
    'biberdebug|D!',
    'help|h|?',
    'version|v'
);

#--------------------------------------------------

use open IO => ':utf8';

our $VERSION = $Biber::VERSION; 

die usage() if exists $opts->{'help'};

die version() if exists $opts->{'version'};

#--------------------------------------------------

# we can give a list of datafiles as argument, so
# this option is passed as an anon array
if ($opts->{bibdata}) {
    $opts->{bibdata} = [ split/,/, $opts->{bibdata} ] 
} ;

my $biber = Biber->new($opts);

#=====================================================
# Parse aux file
#=====================================================

my $auxfile;
my $bblfile; 

if ($opts->{allentries}) {
    if ($opts->{bibdata}) {
        $bblfile = $opts->{bibdata}->[0];
        $bblfile =~ s/\.[^.]+$/\.bbl/;
    }
    else {
        $auxfile = $ARGV[0] or croak usage();
        $auxfile .= '.aux' unless $auxfile =~ m/\.aux$/;
        $bblfile = $auxfile;
        $bblfile =~ s/aux$/bbl/;
        $biber->parse_auxfile($auxfile);
    }
}
else {
    $auxfile = $ARGV[0] or croak usage();
    $bblfile = $auxfile;
    $bblfile =~ s/aux$/bbl/;
    $biber->parse_auxfile($auxfile)
}

#=====================================================
# Parse/query database
#=====================================================

foreach my $bib (@{ $biber->config('bibdata') }) {
    if ($bib =~ /\.(db)?xml$/) {
        $biber->parse_biblatexml( $bib )
    }
    elsif ($bib =~ /\.bib$/) {
        croak "File $bib does not exist!" unless -f $bib;
        $biber->parse_bibtex($bib)
    }
    else {
        croak "File $bib.bib does not exist!" unless -f "$bib.bib";
        $biber->parse_bibtex("$bib.bib")
    }
}

$biber->prepare; 

if ($biber->config('outfile')) {
    $bblfile = $biber->config('outfile')
};

$biber->output_to_bbl($bblfile);

#======================================================

sub version {
    my $me = "biber";    #basename($0);

    qq[
$me Version: $VERSION
      \n]
}

sub usage {
    my $me = "biber";    #basename($0);

    qq[
Usage:  $me <file>.aux
     Creates <file>.bbl

Options:
  --help|-h              Show this help message.
  --version|-v           Display version number.
  --mincrossrefs|-m <n>  Set treshold for crossrefs.
  --fastsort|-f          Do not use LaTeX_Decode and Unicode::Collate for sorting
  --useprd|-p            Force parsing with Parse::RecDescent
  --bibdata|-d <file>    Use <file> as the bibliography database
  --outfile|-O <file>    Output to <file> instead of <basename>.bbl
  --allentries|-a        Output all entries in the database
  --unicodebib|-u        Assume bib file is UTF-8 and skip latex_decode
  --unicodebbl|-U        Encode the bbl output in UTF-8
  --biberdebug|-D        Turn on debugging for biber
    \n]
}

# vim: set tabstop=4 shiftwidth=4:               

