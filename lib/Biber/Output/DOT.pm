package Biber::Output::DOT;
use 5.014000;
use strict;
use warnings;
use base 'Biber::Output::Base';

use Biber::Config;
use Biber::Constants;
use Biber::Entry;
use Biber::Utils;
use List::AllUtils qw( :all );
use IO::File;
use Log::Log4perl qw( :no_extra_logdie_message );
my $logger = Log::Log4perl::get_logger('main');

=encoding utf-8

=head1 NAME

Biber::Output::DOT - class for Biber output of GraphViz .dot files

=cut

=head2 new

    Initialize a Biber::Output::DOT object

=cut

my $graph; # accumulator for .dot string
my $graph_edges; # accumulator for .dot string
my $state; # some state information for building output
my $in; # indentation string
my $i; # indentation level
my $gopts = Biber::Config->getoption('graph');

sub new {
  my $class = shift;
  my $obj = shift;
  my $self = $class->SUPER::new($obj);

  my $HEAD = <<EOF;
// Begin .dot output generated by Biber::Output::DOT
digraph Biberdata {
  edge [ arrowhead=open ];
  graph [ style=filled, rankdir=LR ];
  node [
    fillcolor=white,
    style=filled,
    shape=box ];

EOF

  $self->set_output_head($HEAD);

  return $self;
}

=head2 set_output_target_file

    Set the output target file of a Biber::Output::DOT object
    A convenience around set_output_target so we can keep track of the
    filename

=cut

sub set_output_target_file {
  my $self = shift;
  my $dotfile = shift;
  $self->{output_target_file} = $dotfile;
  my $enc_out;
  $enc_out = ':encoding(UTF-8)';
  my $DOTFILE = IO::File->new($dotfile, ">$enc_out");
  $self->set_output_target($DOTFILE);
}


=head2 set_output_entry

  We don't use this, we output everything in one go at the end

=cut

sub set_output_entry {
  return;
}

=head2 create_output_section

  We don't use this, we output everything in one go at the end

=cut

sub create_output_section {
  return;
}

=head2 output

  Create a graph of the required things and save to .dot format

=cut

sub output {
  my $self = shift;
  my $biber = $Biber::MASTER;
  my $data = $self->{output_data};
  my $target = $self->{output_target};
  my $target_string = "Target"; # Default
  if ($self->{output_target_file}) {
    $target_string = $self->{output_target_file};
  }

  # for debugging mainly
  unless ($target) {
    $target = new IO::File '>-';
  }

  $logger->debug('Preparing final output using class ' . __PACKAGE__ . '...');

  $logger->info("Writing '$target_string' with encoding 'UTF-8'");

  print $target $data->{HEAD};

  $in = 2; # indentation
  $i = '  '; # starting indentation

  # Loop over sections.
  foreach my $section (@{$biber->sections->get_sections}) {
    my $secnum = $section->number;
    if ($gopts->{section}) {
      $graph .= $i x $in . "subgraph \"cluster_section$secnum\" {\n";
      $graph .= $i x $in . "label=\"Section $secnum\";\n";
      $graph .= $i x $in . "fontsize=\"9\";\n";
      $graph .= $i x $in . "fontname=serif;\n";
      $graph .= $i x $in . "fillcolor=\"#fce3fa\";\n";
      $graph .= "\n";
    }

    foreach my $be ($section->bibentries->entries) {
      my $citekey = $be->get_field('citekey');
      $state->{$secnum}{"${secnum}/${citekey}"} = 1;
      my $et = uc($be->get_field('entrytype'));
      # uncited entries are a different colour
      my $c = $section->has_citekey($citekey) ? '#a0d0ff' : '#e3e388';
      if ($gopts->{entry}) { # If granularity is at the level of entries
        $graph .= $i x $in . "\"section${secnum}/${citekey}\" [ label=\"$citekey ($et)\", fillcolor=\"$c\" ]\n";
      }
      elsif ($gopts->{field}) { # If granularity is at the level of fields
        $graph .= $i x $in . "subgraph \"cluster_section${secnum}/${citekey}\" {\n";
        $in += 2;
        $graph .= $i x $in . "label=\"$citekey ($et)\";\n";
        $graph .= $i x $in . "fillcolor=\"$c\";\n";
        $graph .= "\n";
        foreach my $field ($be->datafields) {
          $graph .= $i x $in . "\"section${secnum}/${citekey}/${field}\" [ label=\"" . uc($field) . "\" ]\n";
        }
        $graph .= $i x $in . "}\n\n" if $gopts->{section};
        $in -= 2;
      }
    }

    # crossrefs
    _graph_inheritance('crossref', $secnum) if $gopts->{crossref};

    # xdata
    _graph_inheritance('xdata', $secnum) if $gopts->{xdata};

    # xref
    _graph_xref($secnum) if $gopts->{xref};

    $graph .= $i x $in . "}\n\n" if $gopts->{section};
  }

  $graph .= "\n\n${graph_edges}";

  $graph .= "\n}\n";

  print $target $graph;


  $logger->info("Output to $target_string");
  close $target;
  return;
}

sub _graph_xref {
  my ($secnum) = @_;
  my $gopts = Biber::Config->getoption('graph');
  my $cluster = $gopts->{field} ? 'cluster_' : '';
  if (my $gr = Biber::Config->get_inheritance_graph('xref')) {
    while (my ($f_entry, $v) = each %$gr) {
      while (my (undef, $w) = each %$v) {
        while (my ($t_entry, undef) = each %$w) {
          next unless $state->{$secnum}{"${secnum}/${f_entry}"};
          $graph_edges .= $i x $in . "\"${cluster}section${secnum}/${f_entry}\" -> \"${cluster}section${secnum}/${t_entry}\" [ style=\"dotted\" ]\n";
        }
      }
    }
  }
}

# sub _graph_inheritance {
#   my ($type, $secnum) = @_;
#   my $gopts = Biber::Config->getoption('graph');
#   my $edgestyle;

#   given ($type) {
#     when ('crossref') {
#       $edgestyle = 'solid';
#     }
#     when ('xdata') {
#       $edgestyle = 'dashed';
#     }
#   }

#   if (my $gr = Biber::Config->get_inheritance_graph($type)) {
#     # Just show the entries, no fields
#     if ($gopts->{entry}) {
#       while (my ($f_entry, $v) = each %$gr) {
#         while (my (undef, $w) = each %$v) {
#           while (my ($t_entry, undef) = each %$w) {
#             # Connect the two nodes if they exist - since we
#             # are using all entries (not just cited), they only won't
#             # exist if they are not in this section in which case
#             # we don't want to auto-create them when creating the edge
#             if ($graph->node("section${secnum}/${f_entry}") and
#                 $graph->node("section${secnum}/${t_entry}")) {
#               my $e = $context->add_edge_once("section${secnum}/${f_entry}", "section${secnum}/${t_entry}");
#               $e->set_attribute('style', $edgestyle);
#             }
#           }
#         }
#       }
#     }
#     # Show fields too
#     elsif ($gopts->{field}) {
#       while (my ($f_entry, $v) = each %$gr) {
#         while (my ($f_field, $w) = each %$v) {
#           while (my ($t_entry, $t_field) = each %$w) {
#             if ($graph->group("section${secnum}/${f_entry}") and
#                 $graph->group("section${secnum}/${t_entry}")) {
#               my $e = $context->add_edge_once("section${secnum}/${f_entry}/${f_field}", "section${secnum}/${t_entry}/${t_field}");
#               $e->set_attribute('style', $edgestyle);
#             }
#           }
#         }
#       }
#     }
#   }
# }


1;

__END__

=head1 AUTHORS

François Charette, C<< <firmicus at gmx.net> >>
Philip Kime C<< <philip at kime.org.uk> >>

=head1 BUGS

Please report any bugs or feature requests on our sourceforge tracker at
L<https://sourceforge.net/tracker2/?func=browse&group_id=228270>.

=head1 COPYRIGHT & LICENSE

Copyright 2009-2011 François Charette and Philip Kime, all rights reserved.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
