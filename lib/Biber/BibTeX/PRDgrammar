BibFile : <skip: qr{ \s* (\%+[^\n]*\s*)* }x> Component(s) 
Component : Preamble { 
          $return = { 'preamble' => $item[1] } 
      } 
      | String(s) { 
          my @str = @{$item[1]} ;
          $return = { 'strings' => \@str } ;
          # we perform the substitutions now
          foreach (@str) {
             my ($a, $b) = split(/\s*=\s*/, $_, 2) ;
             $b =~ s/^\s*"|"\s*$//g ;
             $text =~ s/$a\s*#?\s*(\{?)/$1$b/g
          }
      } 
      | Comment(s) { 1 ; }
      | BibEntry(s) { 
          my @entries = @{$item[1]} ; 
          $return = { 'entries' => \@entries } 
      } 
Preamble : /\@PREAMBLE/i PreambleString
PreambleString : { 
          my $value = extract_bracketed($text, '{}') ;
          $value =~ s/^{(.*)}$/$1/s if $value ;
          $value =~ s/"\s*\n+\s*#/\n/mg ;
          $value =~ s/^\s*"\s*//mg ;
          $value =~ s/\s*"\s*$//mg ;
          ($return) = $value if $value ;
}
String : /\@STRING/i StringArg 
StringArg : { 
          my $value = extract_bracketed($text, '{}') ;
          $value =~ s/\s*\n\s*/ /g ;
          ($return) = $value =~ /^{(.*)}$/s if $value ;
}
Comment : /\@COMMENT/i StringArg 
BibEntry : '@' Typename '{' Key ',' Field(s) '}' /\n*/ { 
          my %data = map { %$_ } @{$item[6]} ;
          $return = { $item[4] => {entrytype => lc($item[2]), %data } } 
}
Typename : /[A-Za-z\.\-]+/ 
Key : /[^,\s\n]+/
Field : Fieldname /\s*=\s*/ Fielddata /,?/ {
          $return = { lc($item[1]) => $item[3] } 
}
Fieldname : /\S+/
Fielddata : { 
          my $value = extract_bracketed($text, '{}') ;
          $value =~ s/\s*\n\s*/ /g ;
          ($return) = $value =~ /^{(.*)}$/s if $value ;
} 
| { my $value = extract_delimited($text, '"') ;#"'
          $value =~ s/\s*\n\s*/ /g ;
          ($return) = $value =~ /^"(.*)"$/s if $value ;
} 
| /[^,]+/ { 
          $return = $item[1] 
}
